#Test Cases for matrix_divided function

Importing the function from the module

    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

# Test Case 1
	>>> matrix = [[1, 2, 3], [4, 5, 6]]
	>>> matrix_divided(matrix, 3)
	[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]
	>>> matrix  # Ensure the original matrix is unchanged
	[[1, 2, 3], [4, 5, 6]]

#Test Case empty matrix
	 >>> matrix = []
	 >>> matrix_divided(matrix, 1)
	 []
	 >>> matrix
	 []

#Test Case div as float
	 >>> matrix = [[1, 2, 3], [4, 5, 6]]
	 >>> matrix_divided(matrix, 6.7)
	 [[0.15, 0.3, 0.45], [0.6, 0.75, 0.9]]
	 >>> matrix
	 [[1, 2, 3], [4, 5, 6]]

#Test Case division by zero:
	>>> matrix_divided(matrix, 0)
	Traceback (most recent call last):
	...
	ZeroDivisionError: division by zero

# Test Case (Exception Test - rows of different sizes)
	>>> matrix = [[1, 2, 3], [4, 5]]
	>>> matrix_divided(matrix, 2)
	Traceback (most recent call last):
	...
	TypeError: Each row of the matrix must have the same size

# Test Case (Exception Test - matrix not a list of lists)
	>>> matrix_divided("not_a_matrix", 2)
	Traceback (most recent call last):
	...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

# Test Case (Exception Test - div equal to zero)
	>>> matrix_divided([[1, 2], [3, 4]], 0)
	Traceback (most recent call last):
	...
	ZeroDivisionError: division by zero

# Test Case (Exception Test - div not a number)
	>>> matrix = [[1, 2], [3, 4]]
	>>> matrix_divided(matrix, "not_a_number")
	Traceback (most recent call last):
	...
	TypeError: div must be a number
